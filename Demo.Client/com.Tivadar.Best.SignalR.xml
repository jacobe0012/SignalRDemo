<?xml version="1.0"?>
<doc>
    <assembly>
        <name>com.Tivadar.Best.SignalR</name>
    </assembly>
    <members>
        <member name="T:Best.SignalR.Authentication.DefaultAccessTokenAuthenticator">
            <summary>
            Represents the default access token authenticator that uses the Bearer token scheme for HTTP and WebSockets.
            </summary>
        </member>
        <member name="P:Best.SignalR.Authentication.DefaultAccessTokenAuthenticator.IsPreAuthRequired">
            <summary>
            Indicates that no pre-authentication step is required for this type of authentication.
            </summary>
        </member>
        <member name="E:Best.SignalR.Authentication.DefaultAccessTokenAuthenticator.OnAuthenticationSucceded">
            <summary>
            This event is not used because <see cref="P:Best.SignalR.Authentication.DefaultAccessTokenAuthenticator.IsPreAuthRequired"/> is <c>false</c>.
            </summary>
        </member>
        <member name="E:Best.SignalR.Authentication.DefaultAccessTokenAuthenticator.OnAuthenticationFailed">
            <summary>
            This event is not used because <see cref="P:Best.SignalR.Authentication.DefaultAccessTokenAuthenticator.IsPreAuthRequired"/> is <c>false</c>.
            </summary>
        </member>
        <member name="M:Best.SignalR.Authentication.DefaultAccessTokenAuthenticator.#ctor(Best.SignalR.HubConnection)">
            <summary>
            Initializes a new instance of the DefaultAccessTokenAuthenticator class.
            </summary>
            <param name="connection">The <see cref="T:Best.SignalR.HubConnection"/> for this authenticator.</param>
        </member>
        <member name="M:Best.SignalR.Authentication.DefaultAccessTokenAuthenticator.StartAuthentication">
            <summary>
            Not used as IsPreAuthRequired is false
            </summary>
        </member>
        <member name="M:Best.SignalR.Authentication.DefaultAccessTokenAuthenticator.PrepareRequest(Best.HTTP.HTTPRequest)">
            <summary>
            Prepares the HTTP request by adding appropriate authentication headers or query parameters based on the request type.
            </summary>
            <param name="request">The HTTP request to prepare.</param>
        </member>
        <member name="M:Best.SignalR.Authentication.DefaultAccessTokenAuthenticator.PrepareUri(System.Uri)">
            <summary>
            Prepares the URI by appending the access token if necessary.
            </summary>
            <param name="uri">The original URI.</param>
            <returns>The prepared URI with the access token appended if necessary.</returns>
        </member>
        <member name="M:Best.SignalR.Authentication.DefaultAccessTokenAuthenticator.PrepareUriImpl(System.Uri)">
            <summary>
            Internal method to prepare the URI by appending the access token.
            </summary>
            <param name="uri">The original URI.</param>
            <returns>The prepared URI with the access token appended.</returns>
        </member>
        <member name="M:Best.SignalR.Authentication.DefaultAccessTokenAuthenticator.Cancel">
            <summary>
            Cancels any ongoing authentication operations.
            </summary>
        </member>
        <member name="T:Best.SignalR.TransportTypes">
            <summary>
            Specifies the various transport mechanisms that can be used in a <see cref="T:Best.SignalR.HubConnection"/> context.
            </summary>
        </member>
        <member name="F:Best.SignalR.TransportTypes.WebSocket">
            <summary>
            Represents the WebSocket transport mechanism.
            </summary>
        </member>
        <member name="F:Best.SignalR.TransportTypes.LongPolling">
            <summary>
            Represents the LongPolling transport mechanism.
            </summary>
        </member>
        <member name="T:Best.SignalR.TransferModes">
            <summary>
            Encoding modes a transport is capable to communicate with.
            </summary>
        </member>
        <member name="F:Best.SignalR.TransferModes.Binary">
            <summary>
            The protocol is able to send and/or receive byte arrays. Usually the most performant mode.
            </summary>
        </member>
        <member name="F:Best.SignalR.TransferModes.Text">
            <summary>
            The protocol can send and/or receive textual representation of the messages.
            </summary>
        </member>
        <member name="T:Best.SignalR.TransportStates">
            <summary>
            Represents the possible states of a <see cref="T:Best.SignalR.HubConnection"/>'s transport (<see cref="T:Best.SignalR.Transports.WebSocketTransport">websocket</see> or <see cref="T:Best.SignalR.Transports.LongPollingTransport">long-polling</see>).
            </summary>
        </member>
        <member name="F:Best.SignalR.TransportStates.Initial">
            <summary>
            The initial state of the transport, before any connection attempts have been made.
            </summary>
        </member>
        <member name="F:Best.SignalR.TransportStates.Connecting">
            <summary>
            The state when the transport is in the process of establishing a connection.
            </summary>
        </member>
        <member name="F:Best.SignalR.TransportStates.Connected">
            <summary>
            The state when the transport has successfully established a connection.
            </summary>
        </member>
        <member name="F:Best.SignalR.TransportStates.Closing">
            <summary>
            The state when the transport is in the process of closing the connection.
            </summary>
        </member>
        <member name="F:Best.SignalR.TransportStates.Failed">
            <summary>
            The state when an attempt to establish or maintain a connection has failed.
            </summary>
        </member>
        <member name="F:Best.SignalR.TransportStates.Closed">
            <summary>
            The state when the transport has successfully closed the connection.
            </summary>
        </member>
        <member name="T:Best.SignalR.ConnectionStates">
            <summary>
            Possible states of a HubConnection
            </summary>
        </member>
        <member name="T:Best.SignalR.TransportEvents">
            <summary>
            States that a transport can goes trough as seen from 'outside'.
            </summary>
        </member>
        <member name="F:Best.SignalR.TransportEvents.SelectedToConnect">
            <summary>
            Transport is selected to try to connect to the server
            </summary>
        </member>
        <member name="F:Best.SignalR.TransportEvents.FailedToConnect">
            <summary>
            Transport failed to connect to the server. This event can occur after SelectedToConnect, when already connected and an error occurs it will be a ClosedWithError one.
            </summary>
        </member>
        <member name="F:Best.SignalR.TransportEvents.Connected">
            <summary>
            The transport successfully connected to the server.
            </summary>
        </member>
        <member name="F:Best.SignalR.TransportEvents.Closed">
            <summary>
            Transport gracefully terminated.
            </summary>
        </member>
        <member name="F:Best.SignalR.TransportEvents.ClosedWithError">
            <summary>
            Unexpected error occured and the transport can't recover from it.
            </summary>
        </member>
        <member name="T:Best.SignalR.ITransport">
            <summary>
            Defines the basic structure and operations for a transport mechanism in a <see cref="T:Best.SignalR.HubConnection"/> context.
            Current implemtations are <see cref="T:Best.SignalR.Transports.WebSocketTransport"/> and <see cref="T:Best.SignalR.Transports.LongPollingTransport"/>.
            </summary>
        </member>
        <member name="P:Best.SignalR.ITransport.TransferMode">
            <summary>
            Gets the transfer mode used by the transport, which defines whether it's <see cref="F:Best.SignalR.TransferModes.Binary">binary</see> or <see cref="F:Best.SignalR.TransferModes.Text">text</see>.
            </summary>
        </member>
        <member name="P:Best.SignalR.ITransport.TransportType">
            <summary>
            Gets the type of the transport, such as <see cref="F:Best.SignalR.TransportTypes.WebSocket">websocket</see> or <see cref="F:Best.SignalR.TransportTypes.LongPolling">long-polling</see>.
            </summary>
        </member>
        <member name="P:Best.SignalR.ITransport.State">
            <summary>
            Gets the current <see cref="T:Best.SignalR.TransportStates">state</see> of the transport, which could be connecting, connected, closing, etc.
            </summary>
        </member>
        <member name="P:Best.SignalR.ITransport.ErrorReason">
            <summary>
            Gets a string representation of the reason for any errors that might have occurred during the transport's operations.
            </summary>
        </member>
        <member name="E:Best.SignalR.ITransport.OnStateChanged">
            <summary>
            An event that's triggered whenever the state of the transport changes.
            It provides the previous state and the new state as its parameters.
            </summary>
        </member>
        <member name="M:Best.SignalR.ITransport.StartConnect">
            <summary>
            Initiates the connection process for the transport.
            </summary>
        </member>
        <member name="M:Best.SignalR.ITransport.StartClose">
            <summary>
            Initiates the process to close the transport's connection.
            </summary>
        </member>
        <member name="M:Best.SignalR.ITransport.Send(Best.HTTP.Shared.PlatformSupport.Memory.BufferSegment)">
            <summary>
            Sends data over the transport using the provided <see cref="T:Best.HTTP.Shared.PlatformSupport.Memory.BufferSegment">buffer segment</see>.
            </summary>
            <param name="bufferSegment">The segment of the buffer that contains the data to be sent.</param>
        </member>
        <member name="T:Best.SignalR.IEncoder">
            <summary>
            Common interface for communication protocol encoders.
            </summary>
        </member>
        <member name="M:Best.SignalR.IEncoder.Encode``1(``0)">
            <summary>
            Function to encode the received value as a byte representation, returned as a <see cref="T:Best.HTTP.Shared.PlatformSupport.Memory.BufferSegment"/>.
            </summary>
            <typeparam name="T">Type of the value parameter.</typeparam>
            <param name="value">The value that must be encoded.</param>
            <returns>A byte representation, returned as a <see cref="T:Best.HTTP.Shared.PlatformSupport.Memory.BufferSegment"/>.</returns>
        </member>
        <member name="M:Best.SignalR.IEncoder.DecodeAs``1(Best.HTTP.Shared.PlatformSupport.Memory.BufferSegment)">
            <summary>
            Function to create a strongly typed object from the received <see cref="T:Best.HTTP.Shared.PlatformSupport.Memory.BufferSegment"/>.
            </summary>
            <typeparam name="T">The concrete type the function must decode the buffer to.</typeparam>
            <param name="buffer">Contains the received message as a binary.</param>
            <returns>An object with the type T.</returns>
        </member>
        <member name="M:Best.SignalR.IEncoder.ConvertTo(System.Type,System.Object)">
            <summary>
            Function to convert the received object to another type, or make sure its already in that one.
            </summary>
            <param name="toType">The type to convert to.</param>
            <param name="obj">The object that will be converted.</param>
            <returns>The object with type toType.</returns>
        </member>
        <member name="T:Best.SignalR.WebsocketOptions">
            <summary>
            Represents configuration options specific to the WebSocket transport.
            </summary>
        </member>
        <member name="P:Best.SignalR.WebsocketOptions.ExtensionsFactory">
            <summary>
            Gets or sets the factory method to create WebSocket extensions.
            Defaults to <see cref="M:Best.WebSockets.WebSocket.GetDefaultExtensions"/>.
            </summary>
        </member>
        <member name="P:Best.SignalR.WebsocketOptions.PingIntervalOverride">
            <summary>
            Gets or sets the interval for sending ping messages to keep the <see cref="T:Best.WebSockets.WebSocket"/> connection alive.
            If set to <see cref="F:System.TimeSpan.Zero"/>, it means there's no specific interval set and the default or global settings should be used.
            </summary>
        </member>
        <member name="P:Best.SignalR.WebsocketOptions.CloseAfterNoMessageOverride">
            <summary>
            Gets or sets the maximum time allowed after not receiving any message on the WebSocket connection before considering closing it.
            If set to <c>null</c>, it means there's no specific limit set and the connection won't be closed due to inactivity.
            </summary>
        </member>
        <member name="T:Best.SignalR.HubOptions">
            <summary>
            Represents the configuration options for a <see cref="T:Best.SignalR.HubConnection"/>.
            </summary>
        </member>
        <member name="P:Best.SignalR.HubOptions.SkipNegotiation">
            <summary>
            When this is set to true, the plugin will skip the negotiation request if the PreferedTransport is WebSocket. Its default value is false.
            </summary>
        </member>
        <member name="P:Best.SignalR.HubOptions.PreferedTransport">
            <summary>
            The preferred transport to choose when more than one available. Its default value is TransportTypes.WebSocket.
            </summary>
        </member>
        <member name="P:Best.SignalR.HubOptions.PingInterval">
            <summary>
            A ping message is only sent if the interval has elapsed without a message being sent. Its default value is 15 seconds.
            </summary>
        </member>
        <member name="P:Best.SignalR.HubOptions.PingTimeoutInterval">
            <summary>
            If the client doesn't see any message in this interval, considers the connection broken. Its default value is 30 seconds.
            </summary>
        </member>
        <member name="P:Best.SignalR.HubOptions.MaxRedirects">
            <summary>
            The maximum count of redirect negotiation result that the plugin will follow. Its default value is 100.
            </summary>
        </member>
        <member name="P:Best.SignalR.HubOptions.ConnectTimeout">
            <summary>
            The maximum time that the plugin allowed to spend trying to connect. Its default value is 1 minute.
            </summary>
        </member>
        <member name="P:Best.SignalR.HubOptions.UseStatefulReconnect">
            <summary>
            When this is set to true, the plugin will queue messages while reconnecting and resend them when reconnected. Its default value is false. See https://learn.microsoft.com/en-us/aspnet/core/signalr/configuration?view=aspnetcore-8.0&amp;tabs=dotnet#configure-stateful-reconnect
            </summary>
        </member>
        <member name="P:Best.SignalR.HubOptions.WebsocketOptions">
            <summary>
            Customization options for the websocket transport.
            </summary>
        </member>
        <member name="M:Best.SignalR.HubOptions.#ctor">
            <summary>
            Initializes a new instance of the HubOptions class with default values.
            </summary>
        </member>
        <member name="T:Best.SignalR.IRetryPolicy">
            <summary>
            Defines a contract for implementing retry policies in case of connection failures.
            </summary>
        </member>
        <member name="M:Best.SignalR.IRetryPolicy.GetNextRetryDelay(Best.SignalR.RetryContext)">
            <summary>
            Determines the delay duration before the next connection attempt based on the given <see cref="T:Best.SignalR.RetryContext"/>.
            </summary>
            <param name="context">The context information related to the retry attempt.</param>
            <returns>The delay duration for the next retry attempt, or <c>null</c> if no more retries should be made.</returns>
        </member>
        <member name="T:Best.SignalR.RetryContext">
            <summary>
            Represents context information related to a retry attempt.
            </summary>
        </member>
        <member name="F:Best.SignalR.RetryContext.PreviousRetryCount">
            <summary>
            Previous reconnect attempts. A successful connection sets it back to zero.
            </summary>
        </member>
        <member name="F:Best.SignalR.RetryContext.ElapsedTime">
            <summary>
            Elapsed time since the original connection error.
            </summary>
        </member>
        <member name="F:Best.SignalR.RetryContext.RetryReason">
            <summary>
            String representation of the connection error.
            </summary>
        </member>
        <member name="T:Best.SignalR.DefaultRetryPolicy">
            <summary>
            Provides a default retry policy with predefined backoff times (0, 2, 10, 30 seconds).
            </summary>
        </member>
        <member name="M:Best.SignalR.DefaultRetryPolicy.#ctor">
            <summary>
            Initializes a new instance of the DefaultRetryPolicy class with default backoff times.
            </summary>
        </member>
        <member name="M:Best.SignalR.DefaultRetryPolicy.#ctor(System.Nullable{System.TimeSpan}[])">
            <summary>
            Initializes a new instance of the DefaultRetryPolicy class with custom backoff times.
            </summary>
            <param name="customBackoffTimes">An array of custom backoff times.</param>
        </member>
        <member name="M:Best.SignalR.DefaultRetryPolicy.GetNextRetryDelay(Best.SignalR.RetryContext)">
            <summary>
            Determines the delay duration before the next connection attempt based on the given <see cref="T:Best.SignalR.RetryContext"/>.
            </summary>
            <param name="context">The context information related to the retry attempt.</param>
            <returns>The delay duration for the next retry attempt, or <c>null</c> if no more retries should be made.</returns>
        </member>
        <member name="T:Best.SignalR.HubConnection">
            <summary>
            Represents the main entry point for a SignalR Core connection.
            </summary>
        </member>
        <member name="P:Best.SignalR.HubConnection.Uri">
            <summary>
            Gets the URI of the Hub endpoint.
            </summary>
        </member>
        <member name="P:Best.SignalR.HubConnection.State">
            <summary>
            Gets the current state of this connection.
            </summary>
        </member>
        <member name="P:Best.SignalR.HubConnection.Transport">
            <summary>
            Gets the current active <see cref="T:Best.SignalR.ITransport"/> instance.
            </summary>
        </member>
        <member name="P:Best.SignalR.HubConnection.Protocol">
            <summary>
            Gets the <see cref="T:Best.SignalR.IProtocol"/> implementation that will parse, encode, and decode messages.
            </summary>
        </member>
        <member name="E:Best.SignalR.HubConnection.OnRedirected">
            <summary>
            Called when the connection is redirected to a new URI.
            </summary>
        </member>
        <member name="E:Best.SignalR.HubConnection.OnConnected">
            <summary>
            Called when successfully connected to the hub.
            </summary>
        </member>
        <member name="E:Best.SignalR.HubConnection.OnError">
            <summary>
            Called when an unexpected error happens and the connection is closed.
            </summary>
        </member>
        <member name="E:Best.SignalR.HubConnection.OnClosed">
            <summary>
            Called when the connection is gracefully terminated.
            </summary>
        </member>
        <member name="E:Best.SignalR.HubConnection.OnMessage">
            <summary>
            Called for every server-sent message. The return value determines further processing of the message.
            </summary>
            <returns><c>true</c> if the message should be processed; otherwise, <c>false</c>.</returns>
        </member>
        <member name="E:Best.SignalR.HubConnection.OnReconnecting">
            <summary>
            Called when the HubConnection starts its reconnection process after losing its underlying connection.
            </summary>
        </member>
        <member name="E:Best.SignalR.HubConnection.OnReconnected">
            <summary>
            Called after a successful reconnection.
            </summary>
        </member>
        <member name="E:Best.SignalR.HubConnection.OnTransportEvent">
            <summary>
            Called for transport-related events.
            </summary>
        </member>
        <member name="P:Best.SignalR.HubConnection.AuthenticationProvider">
            <summary>
            Gets or sets the <see cref="T:Best.SignalR.IAuthenticationProvider"/> implementation that will be used to authenticate the connection.
            </summary>
            <value>Its default value is an instance of <see cref="T:Best.SignalR.Authentication.DefaultAccessTokenAuthenticator"/>.</value>
        </member>
        <member name="P:Best.SignalR.HubConnection.NegotiationResult">
            <summary>
            Gets the negotiation response sent by the server.
            </summary>
        </member>
        <member name="P:Best.SignalR.HubConnection.Options">
            <summary>
            Gets the <see cref="T:Best.SignalR.HubOptions"/> instance that were used to create the HubConnection.
            </summary>
        </member>
        <member name="P:Best.SignalR.HubConnection.RedirectCount">
            <summary>
            Gets how many times this connection has been redirected.
            </summary>
        </member>
        <member name="P:Best.SignalR.HubConnection.ReconnectPolicy">
            <summary>
            Gets or sets the reconnect policy that will be used when the underlying connection is lost. Defaults to null.
            </summary>
            <value>Its default value is an instance of <see cref="T:Best.SignalR.DefaultRetryPolicy"/>.</value>
        </member>
        <member name="P:Best.SignalR.HubConnection.Context">
            <summary>
            Logging context of this HubConnection instance.
            </summary>
        </member>
        <member name="F:Best.SignalR.HubConnection.lastInvocationId">
            <summary>
            This will be increment to add a unique id to every message the plugin will send.
            </summary>
        </member>
        <member name="F:Best.SignalR.HubConnection.lastStreamId">
            <summary>
            Id of the last streaming parameter.
            </summary>
        </member>
        <member name="F:Best.SignalR.HubConnection.invocations">
            <summary>
             Store the callback for all sent message that expect a return value from the server. All sent message has
             a unique invocationId that will be sent back from the server.
            </summary>
        </member>
        <member name="F:Best.SignalR.HubConnection.subscriptions">
            <summary>
            This is where we store the methodname => callback mapping.
            </summary>
        </member>
        <member name="F:Best.SignalR.HubConnection.lastMessageSentAt">
            <summary>
            When we sent out the last message to the server.
            </summary>
        </member>
        <member name="M:Best.SignalR.HubConnection.#ctor(System.Uri,Best.SignalR.IProtocol)">
            <summary>
            Initializes a new instance of the HubConnection class.
            </summary>
            <param name="hubUri">The Uri of the Hub.</param>
            <param name="protocol">An <see cref="T:Best.SignalR.IProtocol"/> instance used for parsing and encoding messages.</param>
        </member>
        <member name="M:Best.SignalR.HubConnection.#ctor(System.Uri,Best.SignalR.IProtocol,Best.SignalR.HubOptions)">
            <summary>
            Initializes a new instance of the HubConnection class with specified <see cref="T:Best.SignalR.HubOptions"/> instance.
            </summary>
            <param name="hubUri">The URI of the Hub.</param>
            <param name="protocol">An <see cref="T:Best.SignalR.IProtocol"/> instance used for parsing and encoding messages.</param>
            <param name="options">The <see cref="T:Best.SignalR.HubOptions"/> instance for connection related settings.</param>
        </member>
        <member name="M:Best.SignalR.HubConnection.StartConnect">
            <summary>
            Initiates the connection process to the Hub.
            </summary>
        </member>
        <member name="M:Best.SignalR.HubConnection.ConnectAsync">
            <summary>
            Initiates an asynchronous connection to the Hub and returns a task representing the operation.
            </summary>
            <exception cref="T:System.Exception">Thrown when the connection is not in an initial or redirected state or if the connection process has already started.</exception>
            <returns>A task that represents the asynchronous connection operation and returns the established connection.</returns>
        </member>
        <member name="M:Best.SignalR.HubConnection.StartClose">
            <summary>
            Begins the process to gracefully close the connection.
            </summary>
        </member>
        <member name="M:Best.SignalR.HubConnection.CloseAsync">
            <summary>
            Initiates an asynchronous close operation for the connection and returns a task representing the operation.
            </summary>
            <exception cref="T:System.Exception">Thrown when the <c>CloseAsync</c> method is called multiple times.</exception>
            <returns>A task that represents the asynchronous close operation and returns the closed connection.</returns>
        </member>
        <member name="M:Best.SignalR.HubConnection.Invoke``1(System.String,System.Object[])">
            <summary>
            Invokes the specified method on the server and returns an <see cref="!:IFuture"/> instance to subscribe for various events.
            </summary>
            <typeparam name="TResult">The type of the result expected from the server method.</typeparam>
            <param name="target">The name of the server method to invoke.</param>
            <param name="args">The arguments to pass to the server method.</param>
            <returns>An <see cref="!:IFuture"/> instance that represents the result from the server method.</returns>
            <exception cref="T:System.Exception">Thrown when the connection is not in a connected state.</exception>
        </member>
        <member name="M:Best.SignalR.HubConnection.InvokeAsync``1(System.String,System.Object[])">
            <summary>
            Asynchronously invokes the specified method on the and returns the result.
            </summary>
            <typeparam name="TResult">The type of the result expected from the server method.</typeparam>
            <param name="target">The name of the server method to invoke.</param>
            <param name="args">The arguments to pass to the server method.</param>
            <returns>A task that represents the asynchronous invoke operation and contains the result from the server method.</returns>
            <exception cref="T:System.Exception">Thrown when the connection is not in a connected state or if there are any issues during the invoke process.</exception>
        </member>
        <member name="M:Best.SignalR.HubConnection.InvokeAsync``1(System.String,System.Threading.CancellationToken,System.Object[])">
            <summary>
            Asynchronously invokes the specified method on the server with cancellation support and returns the result.
            </summary>
            <typeparam name="TResult">The type of the result expected from the server method.</typeparam>
            <param name="target">The name of the server method to invoke.</param>
            <param name="cancellationToken">A token that can be used to cancel the asynchronous operation.</param>
            <param name="args">The arguments to pass to the server method.</param>
            <returns>A task that represents the asynchronous invoke operation and contains the result from the server method.</returns>
            <exception cref="T:System.Exception">Thrown when the connection is not in a connected state, the operation is canceled, or if there are any issues during the invoke process.</exception>
        </member>
        <member name="M:Best.SignalR.HubConnection.Send(System.String,System.Object[])">
            <summary>
            Invokes the specified method on the server without expecting a return value.
            </summary>
            <param name="target">The name of the server method to invoke.</param>
            <param name="args">The arguments to send to the server method.</param>
            <returns>A future that indicates the completion of the send operation.</returns>
            <exception cref="T:System.Exception">Thrown when the connection is not in a connected state or if there are any issues during the send process.</exception>
        </member>
        <member name="M:Best.SignalR.HubConnection.SendAsync(System.String,System.Object[])">
            <summary>
            Invokes the specified method on the server without expecting a return value.
            </summary>
            <param name="target">The name of the server method to send the message to.</param>
            <param name="args">The arguments to send to the server method.</param>
            <returns>A task representing the asynchronous send operation.</returns>
        </member>
        <member name="M:Best.SignalR.HubConnection.SendAsync(System.String,System.Threading.CancellationToken,System.Object[])">
            <summary>
            Invokes the specified method on the server without expecting a return value, with an option to cancel.
            </summary>
            <param name="target">The name of the server method to send the message to.</param>
            <param name="cancellationToken">A cancellation token to observe while waiting for the task to complete.</param>
            <param name="args">The arguments to send to the server method.</param>
            <returns>A task representing the asynchronous send operation.</returns>
        </member>
        <member name="M:Best.SignalR.HubConnection.GetDownStreamController``1(System.String,System.Object[])">
            <summary>
            Initializes and retrieves a new downstream controller for the specified target. 
            This is used for handling server methods that send multiple items over time.
            </summary>
            <typeparam name="TDown">The type of items expected from the server.</typeparam>
            <param name="target">The name of the server method to connect to.</param>
            <param name="args">The arguments to send to the server method.</param>
            <returns>A controller for the downstream data.</returns>
        </member>
        <member name="M:Best.SignalR.HubConnection.GetUpStreamController``1(System.String,System.Int32,System.Boolean,System.Object[])">
            <summary>
            Initializes and retrieves a new upstream controller for sending multiple items to the server over time.
            </summary>
            <typeparam name="TResult">The type of the result expected once all items have been sent.</typeparam>
            <param name="target">The name of the server method to connect to.</param>
            <param name="paramCount">The count of items to be sent upstream.</param>
            <param name="downStream">Flag indicating whether this is a downstream operation. If false, it's an upstream operation.</param>
            <param name="args">The arguments to send to the server method.</param>
            <returns>A controller for the upstream data.</returns>
        </member>
        <member name="M:Best.SignalR.HubConnection.On(System.String,System.Action)">
            <summary>
            Registers a callback to be invoked when the server calls the specified method with no parameters.
            </summary>
            <param name="methodName">The name of the method to listen to.</param>
            <param name="callback">The action to be executed when the method is called by the server.</param>
        </member>
        <member name="M:Best.SignalR.HubConnection.On``1(System.String,System.Action{``0})">
            <summary>
            Registers a callback to be invoked when the server calls the specified method.
            </summary>
            <typeparam name="T1">The type of the parameter the server will send.</typeparam>
            <param name="methodName">The name of the method to listen to.</param>
            <param name="callback">The action to be executed when the method is called by the server.</param>
        </member>
        <member name="M:Best.SignalR.HubConnection.On``2(System.String,System.Action{``0,``1})">
            <summary>
            Registers a callback to be invoked when the server calls the specified method.
            </summary>
            <typeparam name="T1">The type of the parameter the server will send.</typeparam>
            <typeparam name="T2">The type of the parameter the server will send.</typeparam>
            <param name="methodName">The name of the method to listen to.</param>
            <param name="callback">The action to be executed when the method is called by the server.</param>
        </member>
        <member name="M:Best.SignalR.HubConnection.On``3(System.String,System.Action{``0,``1,``2})">
            <summary>
            Registers a callback to be invoked when the server calls the specified method.
            </summary>
            <typeparam name="T1">The type of the parameter the server will send.</typeparam>
            <typeparam name="T2">The type of the parameter the server will send.</typeparam>
            <typeparam name="T3">The type of the parameter the server will send.</typeparam>
            <param name="methodName">The name of the method to listen to.</param>
            <param name="callback">The action to be executed when the method is called by the server.</param>
        </member>
        <member name="M:Best.SignalR.HubConnection.On``4(System.String,System.Action{``0,``1,``2,``3})">
            <summary>
            Registers a callback to be invoked when the server calls the specified method.
            </summary>
            <typeparam name="T1">The type of the parameter the server will send.</typeparam>
            <typeparam name="T2">The type of the parameter the server will send.</typeparam>
            <typeparam name="T3">The type of the parameter the server will send.</typeparam>
            <typeparam name="T4">The type of the parameter the server will send.</typeparam>
            <param name="methodName">The name of the method to listen to.</param>
            <param name="callback">The action to be executed when the method is called by the server.</param>
        </member>
        <member name="M:Best.SignalR.HubConnection.On``1(System.String,System.Func{``0})">
            <summary>
            Registers a function callback to be invoked when the server calls the specified function with no parameters, but expects a return value.
            </summary>
            <typeparam name="Result">The type of the return value.</typeparam>
            <param name="methodName">The name of the function to listen to.</param>
            <param name="callback">The function to be executed when the function is called by the server.</param>
        </member>
        <member name="M:Best.SignalR.HubConnection.On``2(System.String,System.Func{``0,``1})">
            <summary>
            Registers a function callback to be invoked when the server calls the specified function with no parameters.
            </summary>
            <typeparam name="Result">The type of the return value.</typeparam>
            <typeparam name="T1">The type of the parameter the server will send.</typeparam>
            <param name="methodName">The name of the function to listen to.</param>
            <param name="callback">The function to be executed when the function is called by the server.</param>
        </member>
        <member name="M:Best.SignalR.HubConnection.On``3(System.String,System.Func{``0,``1,``2})">
            <summary>
            Registers a function callback to be invoked when the server calls the specified function with no parameters.
            </summary>
            <typeparam name="Result">The type of the return value.</typeparam>
            <typeparam name="T1">The type of the parameter the server will send.</typeparam>
            <typeparam name="T2">The type of the parameter the server will send.</typeparam>
            <param name="methodName">The name of the function to listen to.</param>
            <param name="callback">The function to be executed when the function is called by the server.</param>
        </member>
        <member name="M:Best.SignalR.HubConnection.On``4(System.String,System.Func{``0,``1,``2,``3})">
            <summary>
            Registers a function callback to be invoked when the server calls the specified function with no parameters.
            </summary>
            <typeparam name="Result">The type of the return value.</typeparam>
            <typeparam name="T1">The type of the parameter the server will send.</typeparam>
            <typeparam name="T2">The type of the parameter the server will send.</typeparam>
            <typeparam name="T3">The type of the parameter the server will send.</typeparam>
            <param name="methodName">The name of the function to listen to.</param>
            <param name="callback">The function to be executed when the function is called by the server.</param>
        </member>
        <member name="M:Best.SignalR.HubConnection.On``5(System.String,System.Func{``0,``1,``2,``3,``4})">
            <summary>
            Registers a function callback to be invoked when the server calls the specified function with no parameters.
            </summary>
            <typeparam name="Result">The type of the return value.</typeparam>
            <typeparam name="T1">The type of the parameter the server will send.</typeparam>
            <typeparam name="T2">The type of the parameter the server will send.</typeparam>
            <typeparam name="T3">The type of the parameter the server will send.</typeparam>
            <typeparam name="T4">The type of the parameter the server will send.</typeparam>
            <param name="methodName">The name of the function to listen to.</param>
            <param name="callback">The function to be executed when the function is called by the server.</param>
        </member>
        <member name="M:Best.SignalR.HubConnection.OnFunc``1(System.String,System.Type[],System.Func{System.Object[],System.Object})">
            <summary>
            <seealso href="https://github.com/dotnet/aspnetcore/issues/5280">[Epic]: Support returning values from client invocations</seealso>
            </summary>
        </member>
        <member name="M:Best.SignalR.HubConnection.Remove(System.String)">
            <summary>
            Remove all event handlers for <paramref name="methodName"/> that subscribed with an On call.
            </summary>
        </member>
        <member name="T:Best.SignalR.OnAuthenticationSuccededDelegate">
            <summary>
            Delegate for successful authentication events.
            </summary>
        </member>
        <member name="T:Best.SignalR.OnAuthenticationFailedDelegate">
            <summary>
            Delegate for failed authentication events.
            </summary>
        </member>
        <member name="T:Best.SignalR.IAuthenticationProvider">
            <summary>
            Interface for authentication providers.
            </summary>
        </member>
        <member name="P:Best.SignalR.IAuthenticationProvider.IsPreAuthRequired">
            <summary>
            Gets a value indicating whether pre-authentication is required before any request made.
            </summary>
            <remarks>If returns <c>true</c>, the implementation **MUST** implement the <see cref="M:Best.SignalR.IAuthenticationProvider.StartAuthentication"/>, <see cref="M:Best.SignalR.IAuthenticationProvider.Cancel"/> methods and use the <see cref="E:Best.SignalR.IAuthenticationProvider.OnAuthenticationSucceded"/> and <see cref="E:Best.SignalR.IAuthenticationProvider.OnAuthenticationFailed"/> events!</remarks>
        </member>
        <member name="E:Best.SignalR.IAuthenticationProvider.OnAuthenticationSucceded">
            <summary>
            The concrete implementation must call this event when the pre-authentication is succeded. When <see cref="P:Best.SignalR.IAuthenticationProvider.IsPreAuthRequired"/> is <c>false</c>, no-one will subscribe to this event.
            </summary>
        </member>
        <member name="E:Best.SignalR.IAuthenticationProvider.OnAuthenticationFailed">
            <summary>
            The concrete implementation must call this event when the pre-authentication is failed. When <see cref="P:Best.SignalR.IAuthenticationProvider.IsPreAuthRequired"/> is <c>false</c>, no-one will subscribe to this event.
            </summary>
        </member>
        <member name="M:Best.SignalR.IAuthenticationProvider.StartAuthentication">
            <summary>
            This function called once, before the SignalR negotiation begins. If <see cref="P:Best.SignalR.IAuthenticationProvider.IsPreAuthRequired"/> is <c>false</c>, then this step will be skipped.
            </summary>
        </member>
        <member name="M:Best.SignalR.IAuthenticationProvider.PrepareRequest(Best.HTTP.HTTPRequest)">
            <summary>
            Prepares a request by adding authentication information, before it's sent.
            </summary>
            <param name="request">The request to be prepared.</param>
        </member>
        <member name="M:Best.SignalR.IAuthenticationProvider.PrepareUri(System.Uri)">
            <summary>
            Modifies the provided URI if necessary.
            </summary>
            <param name="uri">The original URI.</param>
            <returns>The modified URI or the original if no modifications are made.</returns>
        </member>
        <member name="M:Best.SignalR.IAuthenticationProvider.Cancel">
            <summary>
            Cancels any ongoing authentication process.
            </summary>
        </member>
        <member name="T:Best.SignalR.IProtocol">
            <summary>
            Interface for message encoding-decoding protocols used in a SignalR communication.
            </summary>
        </member>
        <member name="P:Best.SignalR.IProtocol.Name">
            <summary>
            Name of the protocol. This name must be known by the server.
            </summary>
        </member>
        <member name="P:Best.SignalR.IProtocol.Type">
            <summary>
            Type of the encoded message, it can be <see cref="F:Best.SignalR.TransferModes.Binary">binary</see> or <see cref="F:Best.SignalR.TransferModes.Text">textual</see>.
            </summary>
        </member>
        <member name="P:Best.SignalR.IProtocol.Encoder">
            <summary>
            An optional <see cref="T:Best.SignalR.IEncoder"/> implementation if the implementation requires one. With its help, the protocol implementor is able to support different encoders for the same protocol (like a json protocol with pluggable LitJson or JSON .NET encoders).
            </summary>
        </member>
        <member name="P:Best.SignalR.IProtocol.Connection">
            <summary>
            The parent <see cref="T:Best.SignalR.HubConnection"/> instance that the implementation can use to access type informations.
            </summary>
        </member>
        <member name="M:Best.SignalR.IProtocol.ParseMessages(Best.HTTP.Shared.PlatformSupport.Memory.BufferSegment,System.Collections.Generic.List{Best.SignalR.Messages.Message}@)">
            <summary>
            Parses binary message representations into a list of messages.
            </summary>
        </member>
        <member name="M:Best.SignalR.IProtocol.EncodeMessage(Best.SignalR.Messages.Message)">
            <summary>
            Encodes a message into its binary representation.
            </summary>
        </member>
        <member name="M:Best.SignalR.IProtocol.GetRealArguments(System.Type[],System.Object[])">
            <summary>
            Converts argument values to their respective types.
            </summary>
        </member>
        <member name="M:Best.SignalR.IProtocol.ConvertTo(System.Type,System.Object)">
            <summary>
            Converts a value to a given type.
            </summary>
        </member>
        <member name="T:Best.SignalR.JsonProtocol">
            <summary>
            Implementation of the JSON protocol for SignalR communication.
            </summary>
        </member>
        <member name="M:Best.SignalR.JsonProtocol.WithSeparator(System.String)">
            <summary>
            Returns the given string parameter's bytes with the added separator(0x1E).
            </summary>
        </member>
        <member name="T:Best.SignalR.Messages.MessageTypes">
            <summary>
            Possible message types the SignalR protocol can use.
            </summary>
        </member>
        <member name="F:Best.SignalR.Messages.MessageTypes.Handshake">
            <summary>
            This is a made up message type, for easier handshake handling.
            </summary>
        </member>
        <member name="F:Best.SignalR.Messages.MessageTypes.Invocation">
            <summary>
            Represents the Invocation message type.
            <see href="https://github.com/dotnet/aspnetcore/blob/master/src/SignalR/docs/specs/HubProtocol.md#invocation-message-encoding"/>
            </summary>
        </member>
        <member name="F:Best.SignalR.Messages.MessageTypes.StreamItem">
            <summary>
            Represents the StreamItem message type.
            <see href="https://github.com/dotnet/aspnetcore/blob/master/src/SignalR/docs/specs/HubProtocol.md#streamitem-message-encoding"/>
            </summary>
        </member>
        <member name="F:Best.SignalR.Messages.MessageTypes.Completion">
            <summary>
            Represents the Completion message type.
            <see href="https://github.com/dotnet/aspnetcore/blob/master/src/SignalR/docs/specs/HubProtocol.md#completion-message-encoding"/>
            </summary>
        </member>
        <member name="F:Best.SignalR.Messages.MessageTypes.StreamInvocation">
            <summary>
            Represents the StreamInvocation message type.
            <see href="https://github.com/dotnet/aspnetcore/blob/master/src/SignalR/docs/specs/HubProtocol.md#streaminvocation-message-encoding"/>
            </summary>
        </member>
        <member name="F:Best.SignalR.Messages.MessageTypes.CancelInvocation">
            <summary>
            Represents the CancelInvocation message type.
            <see href="https://github.com/dotnet/aspnetcore/blob/master/src/SignalR/docs/specs/HubProtocol.md#cancelinvocation-message-encoding"/>
            </summary>
        </member>
        <member name="F:Best.SignalR.Messages.MessageTypes.Ping">
            <summary>
            Represents the Ping message type.
            <see href="https://github.com/dotnet/aspnetcore/blob/master/src/SignalR/docs/specs/HubProtocol.md#ping-message-encoding"/>
            </summary>
        </member>
        <member name="F:Best.SignalR.Messages.MessageTypes.Close">
            <summary>
            Represents the Close message type.
            <see href="https://github.com/dotnet/aspnetcore/blob/master/src/SignalR/docs/specs/HubProtocol.md#close-message-encoding"/>
            </summary>
        </member>
        <member name="F:Best.SignalR.Messages.MessageTypes.Ack">
            <summary>
            Represents the Ack message type.
            <see href="https://github.com/dotnet/aspnetcore/blob/main/src/SignalR/docs/specs/HubProtocol.md#ack-message-encoding"/>
            </summary>
        </member>
        <member name="F:Best.SignalR.Messages.MessageTypes.Sequence">
            <summary>
            Represents the Sequence message type.
            <see href="https://github.com/dotnet/aspnetcore/blob/main/src/SignalR/docs/specs/HubProtocol.md#sequence-message-encoding"/>
            </summary>
        </member>
        <member name="T:Best.SignalR.Messages.SupportedTransport">
            <summary>
            Represents a transport with its supported transfer formats, used in the <see cref="T:Best.SignalR.Messages.NegotiationResult"/>.
            </summary>
        </member>
        <member name="P:Best.SignalR.Messages.SupportedTransport.Name">
            <summary>
            Name of the transport.
            </summary>
        </member>
        <member name="P:Best.SignalR.Messages.SupportedTransport.SupportedFormats">
            <summary>
            Supported transfer formats of the transport.
            </summary>
        </member>
        <member name="T:Best.SignalR.Messages.NegotiationResult">
            <summary>
            Negotiation result of the /negotiation request.
            <see href="https://github.com/dotnet/aspnetcore/blob/master/src/SignalR/docs/specs/TransportProtocols.md#post-endpoint-basenegotiate-request"/>
            </summary>
        </member>
        <member name="P:Best.SignalR.Messages.NegotiationResult.ConnectionToken">
            <summary>
            The connectionToken which is required by the Long Polling and Server-Sent Events transports (in order to correlate sends and receives).
            </summary>
        </member>
        <member name="P:Best.SignalR.Messages.NegotiationResult.ConnectionId">
            <summary>
            The connectionId which is required by the Long Polling and Server-Sent Events transports (in order to correlate sends and receives).
            </summary>
        </member>
        <member name="P:Best.SignalR.Messages.NegotiationResult.SupportedTransports">
            <summary>
            The availableTransports list which describes the transports the server supports. For each transport, the name of the transport (transport) is listed, as is a list of "transfer formats" supported by the transport (transferFormats)
            </summary>
        </member>
        <member name="P:Best.SignalR.Messages.NegotiationResult.Url">
            <summary>
            The url which is the URL the client should connect to.
            </summary>
        </member>
        <member name="P:Best.SignalR.Messages.NegotiationResult.AccessToken">
            <summary>
            The accessToken which is an optional bearer token for accessing the specified url.
            </summary>
        </member>
        <member name="P:Best.SignalR.Messages.NegotiationResult.UseStatefulReconnect">
            <summary>
            If set to true, the connection should attempt to reconnect with the same <see cref="P:Best.SignalR.Messages.NegotiationResult.ConnectionId"/> if it disconnects.
            </summary>
        </member>
        <member name="P:Best.SignalR.Messages.NegotiationResult.NegotiationResponse">
            <summary>
            The <see cref="T:Best.HTTP.HTTPResponse"/> instance the negotiation-response received with.
            </summary>
        </member>
        <member name="T:Best.SignalR.Transports.LongPollingTransport">
            <summary>
            LongPolling transport implementation.
            https://github.com/aspnet/AspNetCore/blob/master/src/SignalR/docs/specs/TransportProtocols.md#http-post-client-to-server-only
            https://github.com/aspnet/AspNetCore/blob/master/src/SignalR/docs/specs/TransportProtocols.md#long-polling-server-to-client-only
            </summary>
        </member>
        <member name="F:Best.SignalR.Transports.LongPollingTransport.MaxRetries">
            <summary>
            Maximum retries for a failed request
            </summary>
        </member>
        <member name="F:Best.SignalR.Transports.LongPollingTransport.outgoingMessages">
            <summary>
            Polling transport can't send out a new send-messages request until the previous isn't finished, so it must cache new ones.
            </summary>
        </member>
        <member name="F:Best.SignalR.Transports.LongPollingTransport.sendingInProgress">
            <summary>
            Flag indicating that a send-request is already sent out. We have to cache messages (<see cref="F:Best.SignalR.Transports.LongPollingTransport.outgoingMessages"/>) until the request finishes.
            </summary>
        </member>
        <member name="F:Best.SignalR.Transports.LongPollingTransport.stream">
            <summary>
            Cached stream instance. By using a <see cref="T:Best.HTTP.Shared.Streams.BufferSegmentStream"/> we can avoid allocating a large byte[] for the cached messages and copy bytes to the new array.
            </summary>
        </member>
        <member name="P:Best.SignalR.Transports.TransportBase.State">
            <summary>
            Current state of the transport. All changes will be propagated to the HubConnection through the onstateChanged event.
            </summary>
        </member>
        <member name="P:Best.SignalR.Transports.TransportBase.ErrorReason">
            <summary>
            This will store the reason of failures so HubConnection can include it in its OnError event.
            </summary>
        </member>
        <member name="E:Best.SignalR.Transports.TransportBase.OnStateChanged">
            <summary>
            Called every time when the transport's <see cref="P:Best.SignalR.Transports.TransportBase.State"/> changed.
            </summary>
        </member>
        <member name="F:Best.SignalR.Transports.TransportBase.messages">
            <summary>
            Cached list of parsed messages.
            </summary>
        </member>
        <member name="F:Best.SignalR.Transports.TransportBase.connection">
            <summary>
            Parent HubConnection instance.
            </summary>
        </member>
        <member name="M:Best.SignalR.Transports.TransportBase.StartConnect">
            <summary>
            ITransport.StartConnect
            </summary>
        </member>
        <member name="M:Best.SignalR.Transports.TransportBase.Send(Best.HTTP.Shared.PlatformSupport.Memory.BufferSegment)">
            <summary>
            ITransport.Send
            </summary>
            <param name="msg"></param>
        </member>
        <member name="M:Best.SignalR.Transports.TransportBase.StartClose">
            <summary>
            ITransport.StartClose
            </summary>
        </member>
        <member name="T:Best.SignalR.Transports.WebSocketTransport">
            <summary>
            WebSockets transport implementation.
            https://github.com/dotnet/aspnetcore/blob/master/src/SignalR/docs/specs/TransportProtocols.md#websockets-full-duplex
            </summary>
        </member>
        <member name="T:Best.SignalR.UploadChannel`2">
            <summary>
            An upload channel that represents one prameter of a client callable function. It implements the IDisposable
            interface and calls Finish from the Dispose method.
            </summary>
        </member>
        <member name="P:Best.SignalR.UploadChannel`2.Controller">
            <summary>
            The associated upload controller
            </summary>
        </member>
        <member name="P:Best.SignalR.UploadChannel`2.ParamIdx">
            <summary>
            What parameter is bound to.
            </summary>
        </member>
        <member name="P:Best.SignalR.UploadChannel`2.IsFinished">
            <summary>
            Returns true if Finish() or Cancel() is already called.
            </summary>
        </member>
        <member name="P:Best.SignalR.UploadChannel`2.StreamingId">
            <summary>
            The unique generated id of this parameter channel.
            </summary>
        </member>
        <member name="M:Best.SignalR.UploadChannel`2.Upload(`1)">
            <summary>
            Uploads a parameter value to the server.
            </summary>
        </member>
        <member name="M:Best.SignalR.UploadChannel`2.Cancel">
            <summary>
            Calling this function cancels the call itself, not just a parameter upload channel.
            </summary>
        </member>
        <member name="M:Best.SignalR.UploadChannel`2.Finish">
            <summary>
            Finishes the channel by telling the server that no more uplode items will follow.
            </summary>
        </member>
        <member name="T:UnitySourceGeneratedAssemblyMonoScriptTypes_v1.MonoScriptData">
            <summary>
            Data is UTF-8 encoded strings
            </summary>
        </member>
    </members>
</doc>
